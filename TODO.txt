* Fix first-class references to external function definitions, e.g. "let x = zml_print_endline in ...".
  A general (but suboptimal) solution is to construct a closure array at the point of the
  let-binding.  The handler for ApplyUnknown will then do the correct thing.

  (A more efficient solution would simply substitute x -> zml_print_endline as long as 'x' only
  appears in fully-evaluted function applications.)

* Refactor internal representation of certain expressions.  At this point it looks like there's a
  lot of code that could be removed by coalescing all the integer manipulators into the following:
    | UnaryIntOp  of (unary_operation, operand)
    | BinaryIntOp of (binary_operation, operand1, operand2)

* Polymorphic functions.  I had sort of planned to implement this by code duplication: generating a
  specialized implementation for every different instantiation type.

* Tail call elimination.

* Parser rewrite.  I'm not liking the way the ocamlyacc parser is shaping up.  It's difficult to
  read, and I'm not sure it will scale up well to more complicated syntax.  I plan to rewrite using
  a recursive descent approach.  I want to do this rewrite *before* adding significant amounts of
  new syntax.

