
* Register spilling.  At present, the compilation strategy will fail if the register allocator
	requires more than 15 registers ("local variables") for a function implementation.  The most
	straightforward solution is probably to heap-allocate a value array and use that for storage;
	unfortunately the stack is tricky to use for spilling because it doesn't support random access.
	(On the other hand, heap allocation probably means working with "root" references in order to work
	correctly alongside any other code which needs to heap-allocate.)

* Parser rewrite.  I'm not liking the way the ocamlyacc parser is shaping up.  It's difficult to
  read, and I'm not sure it will scale up well to more complicated syntax.  I plan to rewrite using
	a recursive descent approach.  I want to do this rewrite *before* adding significant amounts of
	new syntax.

* Introduction of reference types.  The runtime library already has reference type support, but the
	zasm layer needs a bunch of work to invoke zml_register_root and zml_unregister_root in order to
	manage the lifetimes of reference types declared on the stack.

