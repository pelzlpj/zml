* Support known-function optimization *whenever* a function may be invoked directly with a full
  argument list.  Whenever a function is first-class it can simply be compiled twice: once in
  known-function form and once in closure form.  The context at the call site will determine which
  form should be called.

* Polymorphic functions.  I had sort of planned to implement this by code duplication: generating a
  specialized implementation for every different instantiation type.

* Tail call elimination.

* Parser rewrite.  I'm not liking the way the ocamlyacc parser is shaping up.  It's difficult to
  read, and I'm not sure it will scale up well to more complicated syntax.  I plan to rewrite using
  a recursive descent approach.  I want to do this rewrite *before* adding significant amounts of
  new syntax.

