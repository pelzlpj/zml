
ZML DESIGN NOTES
----------------

The Z-Machine kind of sucks for this sort of application.  So this may
prove to be a challenge.

A ZML runtime will be implemented in assembly.  This shall offer
facilities for allocating type-tagged memory blocks off the heap.
Allocation looks something like this:

   1) Traverse the "free list" and find the first free chunk big enough
      for our block.

      If successful, remove that chunk from the free list, set up the
      chunk with type tag information, and initialize its value.

      A pointer to the new heap-allocated value is stored in a lookup
      table at the end of RAM (the "roots table").  This lookup table is
      used by functions which need to refer to the block; it gives us a
      way to relocate blocks without modifying the stack, and it serves
      as a list of roots for the GC.

   2) If memory cannot be allocated, use a mark-and-sweep algorithm
      to locate unused blocks.  A new free list is formed from the
      unused blocks.

   3) If memory still cannot be allocated, use a Haddon-Waite
      table-based compaction algorithm to relocate live blocks to the
      beginning of the heap.  The roots table at the end of RAM also
      has its pointers updated, so that any references on the stack
      remain valid.

      The Haddon-Waite approach is good from the perspective of
      conserving memory; the minimum block size would be two words, and
      there would be zero memory overhead during the compaction.

Use of the ZML runtime requires some discipline for managing reference
lifetimes.  When client code receives a reference from one of the
functions in the ZML runtime API, that reference is automatically
registered in the table of roots.  The client code takes responsibility
for explicitly releasing the reference when it is no longer required.

The ZML runtime creates a new reference as the return value for each
of the following API calls:

   * zml_array_alloc 
   * zml_ref_clone 
   * zml_array_get_ref

References created in this fashion can be released via 'zml_ref_release'.

Mark-and-Sweep:

   1) For each pointer in the roots table, recursively mark the
      pointed-to block.  "Recursively mark" means marking the block and
      all unmarked blocks it points to, in recursive fashion.

   2) Traverse all memory blocks in the heap.  (The blocks are
      structured such that we can iterate through them efficiently.)
      If the block is marked, then clear the mark.  If the block is
      unmarked, then clear the mark and add the block to the
      (newly-created) free list.  Adjacent free list cells are
      coalesced to assist in allocating larger blocks.

Value Representation:

   * All blocks shall be aligned on a two-word boundary, and shall have a
     two-word-aligned length.  This ensures that (1) every free area is
     large enough to store two words and (2) the word count of a
     memory block will fit in 15 bits.  This permits the following
     representation of a freelist cons cell:

                        +----------+
               Word 1:  |1|   N    |
               Word 2:  | next_ptr |
                ...     |  (free)  |
               Word N:  |   ...    |
                        +----------+
     
     The '1' in Word 1 uniquely identifies a free list cell.  We have 15
     bits available for N, which implies that the entirety of RAM can be
     expressed as a single free region.

   * Blocks containing values shall begin with a header word:

                        ------------
               Word 0:  |0|M|T|    |
                        ------------

     The first bit is 0, to indicate that this is a value and not a free
     block.  The second bit is the Mark bit used by the mark/sweep
     algorithm.  The third bit is the type tag bit.  The remaining 13 bits
     are reserved for type-specific data.

   * Type tag 0 is used for an "array cell", a general purpose storage
     element.  The array cell can store both value and reference types
     simultaneously, making it an ideal representation for ML records,
     list cons cells, etc.

     The size of the array is packed into Word 1.

     Assuming the array holds K data words, the array reserves R = (K +
     15)/16 words to store the "refmap".  This is a bitmap: bit 'k' of
     the bitmap is a 1 iff the value stored at index 'k' in the array
     is a reference (i.e. the mark-and-sweep algorithm needs to follow
     the pointer).

     The layout of the array is as follows:

                              +-------------+
                     Word 0:  |0|M|    0    |
                     Word 1:  |      K      |
                     Word 2:  | (value 0)   |
                     Word 3:  | (value 1)   |
                      ...     |   ...       |
                   Word K+1:  | (value K-1) |
                   Word K+2:  | (refmap 0)  |
                   Word K+3:  | (refmap 1)  |
                      ...     |   ...       |
                     Word N:  |(refmap R-1) |
                              |   padding   |
                              +-------------+

     When an item stored in the array is a reference type, its in-memory
     representation is a heap-relative word address.  (In other words,
     when zml_array_set_ref is called with a root reference argument, the
     roots table entry is dereferenced and the pointed-to reference is
     the thing that gets physically stored in the array.)

     (The initial implementation of the array cell is optimized for simplicity.
     Space optimization can come later.)

   * Type tag 1 is reserved.


Roots Table:

   The table of roots needs to efficiently support the following
   operations:

      1) root_reference = register_root(heap_reference)
         
         Generate a new root identifier for a heap reference, and store
         the heap reference in a location where the GC can track it.

      2) heap_reference = lookup_root(root_reference)

         Given a root identifier for a heap reference, get the current
         value of the heap reference.  This is required because heap
         references will get relocated by the compaction algorithm.

      3) unregister_root(root_reference)

         Remove a root identifier from the set of GC roots.

   These goals can be accomplished using an array of heap references at
   the end of RAM; the physical address of a table entry serves as the
   "root reference".  Each (word-sized) element of the array is either
   occupied by a heap reference, or is a freelist element.  The freelist
   carries no data; each node is simply a word pointer to the next
   freelist node.

   The roots table can easily be made to grow dynamically.  Initially it
   has size 0.  When register_root() is invoked and the freelist is
   empty, then the table extends one position to the "left" (decreasing
   memory address).  The heap extends to the "right", so the heap and
   the roots will grow towards each other as memory is exhausted.

   Potentially the roots table could be made to shrink dynamically, as
   roots are dropped.  I suspect that this is not a high-value feature.
   It is significantly more complex to implement than the case of
   dynamically increasing the table size (it basically works out to
   running a filter() operation on the freelist to get rid of all the
   nodes below a certain memory address).

   Note that heap references in the roots table can be easily
   disambiguated from freelist entries, just by examining the pointer
   values.  Freelist entries are pointers to addresses inside the roots
   area, while root entries are pointers to addresses inside the heap
   area.  This property makes it straightforward for the GC to scan the
   roots table when it carries out the "mark" operation.

